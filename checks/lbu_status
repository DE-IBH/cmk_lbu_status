#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# cmk_lbu_status - check-mk plugin for Alpine Linux lbu status
#
# Authors:
#   Philipp Kilian <liske@ibh.de>
#
# Copyright Holder:
#   2018 (C) IBH IT-Service GmbH [http://www.ibh.de/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# Example output from agent
# changes_since_seconds change_action file
# <<<lbu_status>>>
# 1940 A /etc/added.txt
# 275 U /etc/modified.txt
# 0 D /etc/deleted.txt

# time thresholds for monitoring warnings, in seconds
factory_settings["lbu_status_default"] = {
    "threshold_warning": ( 1800 ),
    "threshold_critical": ( 3600 )
}


def parse_raw_lbu_status_values(info):
    infos = []
    if len(info) > 0:
        infoString = "\nsecs_change mode file"
    else:
        infoString = ""

    for line in info:
        infoString += "\n" + line[0] + " " + line[1] + " " + line[2]
        dummy = {}
        dummy["time"] = int(line[0])
        dummy["filepath"] = line[2]
        if line[1] == "A":
            dummy["change"] = "added"
        elif line[1] == "U":
            dummy["change"] = "modified"
        else:
            dummy["change"] = "deleted"
        infos.append(dummy)
    return infos, infoString


def setTimeString(seconds):
    time_struct_value = time.gmtime(seconds)
    days = int(time.strftime("%j", time_struct_value)) - 1
    yearString = ""
    dayString = ""
    # get year string
    if time_struct_value.tm_year > 1970:
        yearString = str(1970 - time_struct_value.tm_year) + "y "

    # get day string
    if days > 0:
        dayString = str(days) + "d "

    # get clock string
    if time_struct_value.tm_hour != 0:
        clockString = time.strftime("%Hh %Mmin %Ss", time_struct_value)
    elif time_struct_value.tm_min != 0:
        clockString = time.strftime("%Mmin %Ss", time_struct_value)
    elif time_struct_value.tm_sec != 0:
        clockString = time.strftime("%Ss", time_struct_value)
    else:
        # File was deleted with, so no time has been detected for the change
        clockString = "unknown"

    return yearString + dayString + clockString


def check_lbu_status(item, params, info):
    values, valuesString = parse_raw_lbu_status_values(info)
    warn = params["threshold_warning"]
    crit = params["threshold_critical"]
    max_time = 0
    status = 0
    status_deleted = True

    for value in values:
        if value["change"] != "deleted":
            if crit <= value["time"]:
                if status < 2:
                    status = 2
            elif warn <= value["time"] < crit:
                if status < 1:
                    status = 1
            if max_time < value["time"]:
                max_time = value["time"]
            status_deleted = False
        else:
            if status < 2:
                status = 2

    number_of_changes = len(values)
    if number_of_changes == 0:
        message = "No changes pending"
    elif number_of_changes == 1:
        if status_deleted:
            message = str(number_of_changes) + " change pending"
        else:
            message = str(number_of_changes) + " change pending since: " + setTimeString(max_time)
    else:
        if status_deleted:
            message = str(number_of_changes) + " changes pending"
        else:
            message = str(number_of_changes) + " changes pending since: " + setTimeString(max_time)

    return (status, message + valuesString)


def inventory_lbu_status(checktype, info):
    yield None, None


# check registry
check_info["lbu_status"] = {
    'check_function':          check_lbu_status,
    'inventory_function':      inventory_lbu_status,
    'service_description':     'LBU Status',
    'default_levels_variable': 'lbu_status_default',
    'group':                   'lbu_status',
    'has_perfdata':            False
}
